syntax = "proto3";

package org.twins.horn.subscribe;

option java_package = "org.twins.horn.subscribe";
option java_outer_classname = "TwinfaceSubscribeProto";

service TwinfaceSubscribeService {
  rpc GetDataUpdates(TwinfaceSubscribeRequest) returns (stream TwinfaceSubscribeUpdate);
}

message TwinfaceSubscribeRequest {
  string client_id = 1; // User ID for authentication
  repeated TwinEventType event_types = 2;
}

message TwinfaceSubscribeUpdate {
  string update_id = 1;
  TwinEventType event_type = 2;
  string timestamp = 3;
  repeated string updated_twin_ids = 4;
  UpdateStatus status = 5;
  // Optional – present only when status is not SUCCESS
  string error_message = 6;
}

// Extended set of statuses to reflect validation and processing errors
enum UpdateStatus {
  SUCCESS = 0;
  GENERAL_ERROR = 1;          // Unspecified server-side failure
  INPUT_DATA_ERROR = 2;       // Client sent malformed/invalid data
  UNAUTHORIZED = 3;           // Token invalid or expired
  INTERNAL_ERROR = 4;         // Internal services (RabbitMQ, Introspect, Streaming) failed – generic for front-end
  TRANSIENT_ERROR = 5;        // Temporary infrastructure error, retries in progress
  UNAVAILABLE = 6;            // Service permanently unavailable after retries exhausted
}

enum TwinEventType {
    TWIN_UPDATE = 0;
    TOKEN_EXPIRED_WARNING = 1;
    CONNECTION_CLOSED = 2;
}